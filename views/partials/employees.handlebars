<div class="panel">
  <div class="panel-header">
    <h2>Employee Management</h2>
    <button id="new-employee-btn" class="btn">Add Employee</button>
  </div>
  
  <div class="search-container">
    <input type="text" id="employee-search" class="search-input" placeholder="Search by name or username...">
  </div>
  
  <div id="employee-list">
    <p>Loading employees...</p>
  </div>
  
  <div id="employee-form-container" style="display:none;">
    <h3>Add New Employee</h3>
    <form id="employeeForm">
      <div class="form-group">
        <label for="username">Username</label>
        <input type="text" id="username" name="username" required>
      </div>
      <div class="form-group">
        <label for="password">Password</label>
        <input type="password" id="password" name="password" required>
      </div>
      <div class="form-group">
        <label for="firstname">First Name</label>
        <input type="text" id="firstname" name="firstname" required>
      </div>
      <div class="form-group">
        <label for="lastname">Last Name</label>
        <input type="text" id="lastname" name="lastname" required>
      </div>
      <div class="form-group">
        <label for="role">Role</label>
        <select id="role" name="role" required>
          <option value="" disabled selected>Select a Role</option>
          <option value="Field Manager">Field Manager</option>
          <option value="Engineer">Engineer</option>
        </select>
      </div>
      <div class="form-group">
        <button type="submit" class="btn">Create Employee</button>
        <button type="button" id="cancel-employee-btn" class="btn">Cancel</button>
      </div>
    </form>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const employeeList = document.getElementById('employee-list');
    const searchInput = document.getElementById('employee-search');
    let allEmployees = [];
    
    // Fetch employees
    function loadEmployees() {
      fetch('/users')
        .then(res => res.json())
        .then(users => {
          allEmployees = users;
          renderEmployees(users);
        })
        .catch(err => {
          employeeList.innerHTML = `<p>Error loading employees: ${err.message}</p>`;
        });
    }
    
    // Render employee list
    function renderEmployees(employees) {
      if (employees.length === 0) {
        employeeList.innerHTML = '<p>No employees found</p>';
        return;
      }
      
      const table = document.createElement('table');
      table.style.width = '100%';
      table.style.borderCollapse = 'collapse';
      
      // Table header
      const thead = document.createElement('thead');
      thead.innerHTML = `
        <tr>
          <th style="text-align:left;padding:8px;border-bottom:1px solid #ddd;">Name</th>
          <th style="text-align:left;padding:8px;border-bottom:1px solid #ddd;">Username</th>
          <th style="text-align:left;padding:8px;border-bottom:1px solid #ddd;">Role</th>
          <th style="text-align:left;padding:8px;border-bottom:1px solid #ddd;">Actions</th>
        </tr>
      `;
      table.appendChild(thead);
      
      // Table body
      const tbody = document.createElement('tbody');
      employees.forEach(employee => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td style="padding:8px;border-bottom:1px solid #eee;">${employee.firstname} ${employee.lastname}</td>
          <td style="padding:8px;border-bottom:1px solid #eee;">${employee.username}</td>
          <td style="padding:8px;border-bottom:1px solid #eee;">${employee.role}</td>
          <td style="padding:8px;border-bottom:1px solid #eee;">
            <button class="btn-sm delete-employee" data-id="${employee._id}">Delete</button>
          </td>
        `;
        tbody.appendChild(tr);
      });
      
      table.appendChild(tbody);
      employeeList.innerHTML = '';
      employeeList.appendChild(table);
      
      // Add event listeners for delete buttons
      document.querySelectorAll('.delete-employee').forEach(btn => {
        btn.addEventListener('click', function() {
          if (confirm('Are you sure you want to delete this employee?')) {
            const employeeId = this.getAttribute('data-id');
            deleteEmployee(employeeId);
          }
        });
      });
    }
    
    // Delete employee
    function deleteEmployee(employeeId) {
      fetch(`/users/${employeeId}`, {
        method: 'DELETE'
      })
        .then(res => {
          if (res.ok) {
            loadEmployees(); // Refresh list
            alert('Employee deleted successfully');
          } else {
            return res.json().then(data => {
              throw new Error(data.message || 'Failed to delete employee');
            });
          }
        })
        .catch(err => {
          alert(`Error: ${err.message}`);
        });
    }
    
    // Search functionality
    searchInput.addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();
      if (searchTerm.length === 0) {
        renderEmployees(allEmployees);
        return;
      }
      
      const filteredEmployees = allEmployees.filter(employee => 
        employee.username.toLowerCase().includes(searchTerm) || 
        employee.firstname.toLowerCase().includes(searchTerm) || 
        employee.lastname.toLowerCase().includes(searchTerm)
      );
      
      renderEmployees(filteredEmployees);
    });
    
    // Add employee form
    const newEmployeeBtn = document.getElementById('new-employee-btn');
    const employeeFormContainer = document.getElementById('employee-form-container');
    const cancelEmployeeBtn = document.getElementById('cancel-employee-btn');
    const employeeForm = document.getElementById('employeeForm');
    
    newEmployeeBtn.addEventListener('click', () => {
      employeeFormContainer.style.display = 'block';
    });
    
    cancelEmployeeBtn.addEventListener('click', () => {
      employeeFormContainer.style.display = 'none';
      employeeForm.reset();
    });
    
    employeeForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = {
        username: document.getElementById('username').value.trim(),
        password: document.getElementById('password').value,
        firstname: document.getElementById('firstname').value.trim(),
        lastname: document.getElementById('lastname').value.trim(),
        role: document.getElementById('role').value
      };
      
      fetch('/users', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      })
        .then(res => {
          if (res.ok) {
            loadEmployees(); // Refresh list
            employeeFormContainer.style.display = 'none';
            employeeForm.reset();
            alert('Employee created successfully');
          } else {
            return res.json().then(data => {
              throw new Error(data.message || 'Failed to create employee');
            });
          }
        })
        .catch(err => {
          alert(`Error: ${err.message}`);
        });
    });
    
    // Load employees on page load
    loadEmployees();
  });
</script>