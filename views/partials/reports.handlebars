<div class="panel">
  <div class="panel-header">
    <h2>Reports</h2>
    <button id="new-report-btn" class="btn">Create Report</button>
  </div>
  
  <div class="project-selector">
    <label for="report-project-selector">Select Project:</label>
    <select id="report-project-selector">
      <option value="" disabled selected>Select a project</option>
    </select>
  </div>
  
  <div class="search-container" style="margin-top:15px;">
    <input type="text" id="report-search" class="search-input" placeholder="Search reports by title or tag...">
  </div>
  
  <div id="reports-container">
    <p>Please select a project to view reports</p>
  </div>
  
  <div id="report-form-container" style="display:none; margin-top:20px;">
    <h3>Create New Report</h3>
    <form id="reportForm">
      <div class="form-group">
        <label for="report-title">Title</label>
        <input type="text" id="report-title" name="title" required>
      </div>
      <div class="form-group">
        <label for="report-description">Description</label>
        <textarea id="report-description" name="description" required></textarea>
      </div>
      <div class="form-group">
        <label for="report-tags">Tags (comma separated)</label>
        <input type="text" id="report-tags" name="tags" placeholder="e.g. inspection, safety, daily">
      </div>
      <div class="form-group">
        <label for="report-fileURL">File URL</label>
        <input type="text" id="report-fileURL" name="fileURL" required placeholder="e.g. report.pdf">
      </div>
      <div class="form-group">
        <button type="submit" class="btn">Create Report</button>
        <button type="button" id="cancel-report-btn" class="btn">Cancel</button>
      </div>
    </form>
  </div>
  
  <div id="report-details" style="display:none; margin-top:20px;">
    <div class="panel-header">
      <h3>Report Details</h3>
      <button id="back-to-reports" class="btn-sm">Back to Reports</button>
    </div>
    <div id="report-info"></div>
    
    <div class="panel" style="margin-top:20px;">
      <h4>Issues</h4>
      <div id="issues-list"></div>
      
      <div id="issue-form-container" style="margin-top:15px;">
        <h4>Add New Issue</h4>
        <form id="issueForm">
          <div class="form-group">
            <label for="issue-title">Title</label>
            <input type="text" id="issue-title" name="title" required>
          </div>
          <div class="form-group">
            <label for="issue-description">Description</label>
            <textarea id="issue-description" name="description" required></textarea>
          </div>
          <div class="form-group">
            <button type="submit" class="btn">Add Issue</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const projectSelector = document.getElementById('report-project-selector');
    const reportsContainer = document.getElementById('reports-container');
    const searchInput = document.getElementById('report-search');
    const newReportBtn = document.getElementById('new-report-btn');
    const reportFormContainer = document.getElementById('report-form-container');
    const cancelReportBtn = document.getElementById('cancel-report-btn');
    const reportForm = document.getElementById('reportForm');
    const reportDetails = document.getElementById('report-details');
    const reportInfo = document.getElementById('report-info');
    const issuesList = document.getElementById('issues-list');
    const issueForm = document.getElementById('issueForm');
    const backToReportsBtn = document.getElementById('back-to-reports');
    
    let allReports = [];
    let currentProject = null;
    let currentReport = null;
    
    // Load projects for the dropdown
    function loadProjects() {
      fetch('/projects')
        .then(res => res.json())
        .then(projects => {
          projectSelector.innerHTML = '<option value="" disabled selected>Select a project</option>';
          
          projects.forEach(project => {
            const option = document.createElement('option');
            option.value = project._id;
            option.textContent = project.title;
            projectSelector.appendChild(option);
          });
        })
        .catch(err => {
          alert(`Error loading projects: ${err.message}`);
        });
    }
    
    // Load reports for a project
    function loadReports(projectId) {
      reportsContainer.innerHTML = '<p>Loading reports...</p>';
      
      fetch(`/projects/${projectId}/reports`)
        .then(res => res.json())
        .then(reports => {
          allReports = reports;
          renderReports(reports);
          currentProject = projectId;
        })
        .catch(err => {
          reportsContainer.innerHTML = `<p>Error loading reports: ${err.message}</p>`;
        });
    }
    
    // Render reports list
    function renderReports(reports) {
      if (reports.length === 0) {
        reportsContainer.innerHTML = '<p>No reports found for this project</p>';
        return;
      }
      
      const table = document.createElement('table');
      table.style.width = '100%';
      table.style.borderCollapse = 'collapse';
      
      // Table header
      const thead = document.createElement('thead');
      thead.innerHTML = `
        <tr>
          <th style="text-align:left;padding:8px;border-bottom:1px solid #ddd;">Title</th>
          <th style="text-align:left;padding:8px;border-bottom:1px solid #ddd;">Description</th>
          <th style="text-align:left;padding:8px;border-bottom:1px solid #ddd;">Tags</th>
          <th style="text-align:left;padding:8px;border-bottom:1px solid #ddd;">Issues</th>
          <th style="text-align:left;padding:8px;border-bottom:1px solid #ddd;">Actions</th>
        </tr>
      `;
      table.appendChild(thead);
      
      // Table body
      const tbody = document.createElement('tbody');
      
      reports.forEach(report => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td style="padding:8px;border-bottom:1px solid #eee;">${report.title}</td>
          <td style="padding:8px;border-bottom:1px solid #eee;">${report.description.substring(0, 30)}${report.description.length > 30 ? '...' : ''}</td>
          <td style="padding:8px;border-bottom:1px solid #eee;">
            ${report.tags.map(tag => `<span class="tag" style="display:inline-block; background:#f0f0f0; padding:2px 6px; margin:2px; border-radius:3px;">${tag}</span>`).join('')}
          </td>
          <td style="padding:8px;border-bottom:1px solid #eee;">${report.issues.length}</td>
          <td style="padding:8px;border-bottom:1px solid #eee;">
            <button class="btn-sm view-report" data-id="${report._id}">View</button>
            {{#ifCond user.role "Field Manager"}}
            <button class="btn-sm delete-report" data-id="${report._id}">Delete</button>
            {{/ifCond}}
          </td>
        `;
        tbody.appendChild(tr);
      });
      
      table.appendChild(tbody);
      reportsContainer.innerHTML = '';
      reportsContainer.appendChild(table);
      
      // Add event listeners for action buttons
      document.querySelectorAll('.view-report').forEach(btn => {
        btn.addEventListener('click', function() {
          const reportId = this.getAttribute('data-id');
          viewReport(reportId);
        });
      });
      
      {{#ifCond user.role "Field Manager"}}
      document.querySelectorAll('.delete-report').forEach(btn => {
        btn.addEventListener('click', function() {
          if (confirm('Are you sure you want to delete this report?')) {
            const reportId = this.getAttribute('data-id');
            deleteReport(reportId);
          }
        });
      });
      {{/ifCond}}
    }
    
    // View report details
    function viewReport(reportId) {
      fetch(`/projects/${currentProject}/reports/${reportId}`)
        .then(res => res.json())
        .then(report => {
          currentReport = report;
          
          reportInfo.innerHTML = `
            <div class="report-header">
              <h3>${report.title}</h3>
            </div>
            <div class="report-body">
              <p><strong>Description:</strong> ${report.description}</p>
              <p><strong>Tags:</strong> ${report.tags.map(tag => `<span class="tag" style="display:inline-block; background:#f0f0f0; padding:2px 6px; margin:2px; border-radius:3px;">${tag}</span>`).join('')}</p>
              <p><strong>File URL:</strong> <a href="${report.fileURL}" target="_blank">${report.fileURL}</a></p>
              <p><strong>Report ID:</strong> ${report._id}</p>
            </div>
          `;
          
          // Render issues
          renderIssues(report.issues);
          
          // Show report details
          reportsContainer.style.display = 'none';
          reportFormContainer.style.display = 'none';
          reportDetails.style.display = 'block';
        })
        .catch(err => {
          alert(`Error loading report details: ${err.message}`);
        });
    }
    
    // Render issues list
    function renderIssues(issues) {
      if (issues.length === 0) {
        issuesList.innerHTML = '<p>No issues reported</p>';
        return;
      }
      
      const issuesTable = document.createElement('table');
      issuesTable.style.width = '100%';
      issuesTable.style.borderCollapse = 'collapse';
      
      // Table header
      const thead = document.createElement('thead');
      thead.innerHTML = `
        <tr>
          <th style="text-align:left;padding:8px;border-bottom:1px solid #ddd;">Title</th>
          <th style="text-align:left;padding:8px;border-bottom:1px solid #ddd;">Description</th>
          <th style="text-align:left;padding:8px;border-bottom:1px solid #ddd;">Status</th>
          <th style="text-align:left;padding:8px;border-bottom:1px solid #ddd;">Actions</th>
        </tr>
      `;
      issuesTable.appendChild(thead);
      
      // Table body
      const tbody = document.createElement('tbody');
      
      // Fetch users for raised by info
      fetch('/users')
        .then(res => res.json())
        .then(users => {
          issues.forEach(issue => {
            const raiser = users.find(user => user._id === issue.raisedBy);
            const raiserName = raiser ? 
              `${raiser.firstname} ${raiser.lastname}` : 
              'Unknown';
              
            const statusClass = issue.status === 'Pending' ? 'text-warning' :
                               issue.status === 'InProgress' ? 'text-primary' :
                               'text-success';
            
            const tr = document.createElement('tr');
            tr.innerHTML = `
              <td style="padding:8px;border-bottom:1px solid #eee;">${issue.title}</td>
              <td style="padding:8px;border-bottom:1px solid #eee;">${issue.description.substring(0, 30)}${issue.description.length > 30 ? '...' : ''}</td>
              <td style="padding:8px;border-bottom:1px solid #eee; font-weight:bold;" class="${statusClass}">${issue.status}</td>
              <td style="padding:8px;border-bottom:1px solid #eee;">
                <button class="btn-sm update-issue-status" data-id="${issue._id}" data-current="${issue.status}">Update Status</button>
              </td>
            `;
            tbody.appendChild(tr);
          });
          
          issuesTable.appendChild(tbody);
          issuesList.innerHTML = '';
          issuesList.appendChild(issuesTable);
          
          // Add event listeners for action buttons
          document.querySelectorAll('.update-issue-status').forEach(btn => {
            btn.addEventListener('click', function() {
              const issueId = this.getAttribute('data-id');
              const currentStatus = this.getAttribute('data-current');
              showUpdateIssueStatusForm(issueId, currentStatus);
            });
          });
        });
    }
    
    // Show issue status update form
    function showUpdateIssueStatusForm(issueId, currentStatus) {
      // Create a simple popup form
      const statusForm = document.createElement('div');
      statusForm.style.position = 'fixed';
      statusForm.style.top = '50%';
      statusForm.style.left = '50%';
      statusForm.style.transform = 'translate(-50%, -50%)';
      statusForm.style.padding = '20px';
      statusForm.style.backgroundColor = 'white';
      statusForm.style.boxShadow = '0 0 10px rgba(0,0,0,0.3)';
      statusForm.style.zIndex = '1000';
      statusForm.style.borderRadius = '5px';
      
      statusForm.innerHTML = `
        <h3>Update Issue Status</h3>
        <div class="form-group">
          <label for="issue-status-select">Status</label>
          <select id="issue-status-select">
            <option value="Pending" ${currentStatus === 'Pending' ? 'selected' : ''}>Pending</option>
            <option value="InProgress" ${currentStatus === 'InProgress' ? 'selected' : ''}>In Progress</option>
            <option value="Complete" ${currentStatus === 'Complete' ? 'selected' : ''}>Complete</option>
          </select>
        </div>
        <div class="form-group" style="margin-top:10px;">
          <button id="save-issue-status" class="btn">Save</button>
          <button id="cancel-issue-status" class="btn" style="margin-left:10px;">Cancel</button>
        </div>
      `;
      
      document.body.appendChild(statusForm);
      
      // Add event listeners
      document.getElementById('save-issue-status').addEventListener('click', function() {
        const newStatus = document.getElementById('issue-status-select').value;
        updateIssueStatus(issueId, newStatus);
        document.body.removeChild(statusForm);
      });
      
      document.getElementById('cancel-issue-status').addEventListener('click', function() {
        document.body.removeChild(statusForm);
      });
    }
    
    // Update issue status
    function updateIssueStatus(issueId, newStatus) {
      fetch(`/projects/${currentProject}/reports/${currentReport._id}/issues/${issueId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: newStatus })
      })
        .then(res => {
          if (res.ok) {
            viewReport(currentReport._id);
            alert('Issue status updated successfully');
          } else {
            return res.json().then(data => {
              throw new Error(data.message || 'Failed to update issue status');
            });
          }
        })
        .catch(err => {
          alert(`Error: ${err.message}`);
        });
    }
    
    // Delete report
    function deleteReport(reportId) {
      fetch(`/projects/${currentProject}/reports/${reportId}`, {
        method: 'DELETE'
      })
        .then(res => {
          if (res.ok) {
            loadReports(currentProject);
            alert('Report deleted successfully');
          } else {
            return res.json().then(data => {
              throw new Error(data.message || 'Failed to delete report');
            });
          }
        })
        .catch(err => {
          alert(`Error: ${err.message}`);
        });
    }
    
    // Handle new report button
    newReportBtn.addEventListener('click', () => {
      if (!currentProject) {
        alert('Please select a project first');
        return;
      }
      reportDetails.style.display = 'none';
      reportFormContainer.style.display = 'block';
    });
    
    cancelReportBtn.addEventListener('click', () => {
      reportFormContainer.style.display = 'none';
      reportsContainer.style.display = 'block';
      reportForm.reset();
    });
    
    // Handle report form submission
    reportForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const tagsInput = document.getElementById('report-tags').value;
      const tags = tagsInput ? tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag) : [];
      
      const formData = {
        title: document.getElementById('report-title').value,
        description: document.getElementById('report-description').value,
        tags: tags,
        fileURL: document.getElementById('report-fileURL').value
      };
      
      fetch(`/projects/${currentProject}/reports`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      })
        .then(res => {
          if (res.ok) {
            loadReports(currentProject);
            reportFormContainer.style.display = 'none';
            reportsContainer.style.display = 'block';
            reportForm.reset();
            alert('Report created successfully');
          } else {
            return res.json().then(data => {
              throw new Error(data.message || 'Failed to create report');
            });
          }
        })
        .catch(err => {
          alert(`Error: ${err.message}`);
        });
    });
    
    // Handle issue form submission
    issueForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = {
        title: document.getElementById('issue-title').value,
        description: document.getElementById('issue-description').value
      };
      
      fetch(`/projects/${currentProject}/reports/${currentReport._id}/issues`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      })
        .then(res => {
          if (res.ok) {
            viewReport(currentReport._id);
            document.getElementById('issue-title').value = '';
            document.getElementById('issue-description').value = '';
            alert('Issue added successfully');
          } else {
            return res.json().then(data => {
              throw new Error(data.message || 'Failed to add issue');
            });
          }
        })
        .catch(err => {
          alert(`Error: ${err.message}`);
        });
    });
    
    // Handle back button
    backToReportsBtn.addEventListener('click', () => {
      reportDetails.style.display = 'none';
      reportsContainer.style.display = 'block';
    });
    
    // Project selection change
    projectSelector.addEventListener('change', function() {
      const projectId = this.value;
      if (projectId) {
        loadReports(projectId);
      }
    });
    
    // Search functionality
    searchInput.addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();
      if (!currentProject || searchTerm.length === 0) {
        renderReports(allReports);
        return;
      }
      
      const filteredReports = allReports.filter(report => 
        report.title.toLowerCase().includes(searchTerm) ||
        report.tags.some(tag => tag.toLowerCase().includes(searchTerm))
      );
      
      renderReports(filteredReports);
    });
    
    // Initial load
    loadProjects();
  });
</script>